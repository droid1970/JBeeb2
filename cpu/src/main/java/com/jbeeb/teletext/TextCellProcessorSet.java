package com.jbeeb.teletext;

import static com.jbeeb.teletext.TeletextCharacterDefinitions.*;

import java.util.HashMap;
import java.util.Map;

final class TextCellProcessorSet extends AbstractCellProcessorSet {

    private static final Map<Integer, CellProcessor> MAP = new HashMap<>();
    static {

        int code = 32;

        register(code++, SPACE);
        register(code++, EXCLAMATION_MARK);
        register(code++, DOUBLE_QUOTE);
        register(code++, POUND);
        register(code++, DOLLAR);
        register(code++, PERCENT);
        register(code++, AMPERSAND);
        register(code++, SINGLE_QUOTE);
        register(code++, OPEN_BRACKET);
        register(code++, CLOSE_BRACKET);
        register(code++, STAR);
        register(code++, PLUS);
        register(code++, COMMA);
        register(code++, MINUS);
        register(code++, DOT);
        register(code++, FORWARD_SLASH);
        register(code++, ZERO);
        register(code++, ONE);
        register(code++, TWO);
        register(code++, THREE);
        register(code++, FOUR);
        register(code++, FIVE);
        register(code++, SIX);
        register(code++, SEVEN);
        register(code++, EIGHT);
        register(code++, NINE);
        register(code++, COLON);
        register(code++, SEMICOLON);
        register(code++, LESS_THAN);
        register(code++, EQUALS);
        register(code++, GREATER_THAN);
        register(code++, QUESTION_MARK);
        register(code++, AT);
        register(code++, UPPER_A);
        register(code++, UPPER_B);
        register(code++, UPPER_C);
        register(code++, UPPER_D);
        register(code++, UPPER_E);
        register(code++, UPPER_F);
        register(code++, UPPER_G);
        register(code++, UPPER_H);
        register(code++, UPPER_I);
        register(code++, UPPER_J);
        register(code++, UPPER_K);
        register(code++, UPPER_L);
        register(code++, UPPER_M);
        register(code++, UPPER_N);
        register(code++, UPPER_O);
        register(code++, UPPER_P);
        register(code++, UPPER_Q);
        register(code++, UPPER_R);
        register(code++, UPPER_S);
        register(code++, UPPER_T);
        register(code++, UPPER_U);
        register(code++, UPPER_V);
        register(code++, UPPER_W);
        register(code++, UPPER_X);
        register(code++, UPPER_Y);
        register(code++, UPPER_Z);
        register(code++, LEFT_ARROW);
        register(code++, HALF);
        register(code++, RIGHT_ARROW);
        register(code++, UP_ARROW);
        register(code++, HASH);
        register(code++, UNDERSCORE);
        register(code++, LOWER_A);
        register(code++, LOWER_B);
        register(code++, LOWER_C);
        register(code++, LOWER_D);
        register(code++, LOWER_E);
        register(code++, LOWER_F);
        register(code++, LOWER_G);
        register(code++, LOWER_H);
        register(code++, LOWER_I);
        register(code++, LOWER_J);
        register(code++, LOWER_K);
        register(code++, LOWER_L);
        register(code++, LOWER_M);
        register(code++, LOWER_N);
        register(code++, LOWER_O);
        register(code++, LOWER_P);
        register(code++, LOWER_Q);
        register(code++, LOWER_R);
        register(code++, LOWER_S);
        register(code++, LOWER_T);
        register(code++, LOWER_U);
        register(code++, LOWER_V);
        register(code++, LOWER_W);
        register(code++, LOWER_X);
        register(code++, LOWER_Y);
        register(code++, LOWER_Z);
        register(code++, QUARTER);
        register(code++, PIPE);
        register(code++, THREE_QUARTERS);
        register(code++, DIVIDE);

        code = 160;

        register(code++, SPACE);
        register(code++, EXCLAMATION_MARK);
        register(code++, DOUBLE_QUOTE);
        register(code++, POUND);
        register(code++, DOLLAR);
        register(code++, PERCENT);
        register(code++, AMPERSAND);
        register(code++, SINGLE_QUOTE);
        register(code++, OPEN_BRACKET);
        register(code++, CLOSE_BRACKET);
        register(code++, STAR);
        register(code++, PLUS);
        register(code++, COMMA);
        register(code++, MINUS);
        register(code++, DOT);
        register(code++, FORWARD_SLASH);
        register(code++, ZERO);
        register(code++, ONE);
        register(code++, TWO);
        register(code++, THREE);
        register(code++, FOUR);
        register(code++, FIVE);
        register(code++, SIX);
        register(code++, SEVEN);
        register(code++, EIGHT);
        register(code++, NINE);
        register(code++, COLON);
        register(code++, SEMICOLON);
        register(code++, LESS_THAN);
        register(code++, EQUALS);
        register(code++, GREATER_THAN);
        register(code++, QUESTION_MARK);
        register(code++, AT);
        register(code++, UPPER_A);
        register(code++, UPPER_B);
        register(code++, UPPER_C);
        register(code++, UPPER_D);
        register(code++, UPPER_E);
        register(code++, UPPER_F);
        register(code++, UPPER_G);
        register(code++, UPPER_H);
        register(code++, UPPER_I);
        register(code++, UPPER_J);
        register(code++, UPPER_K);
        register(code++, UPPER_L);
        register(code++, UPPER_M);
        register(code++, UPPER_N);
        register(code++, UPPER_O);
        register(code++, UPPER_P);
        register(code++, UPPER_Q);
        register(code++, UPPER_R);
        register(code++, UPPER_S);
        register(code++, UPPER_T);
        register(code++, UPPER_U);
        register(code++, UPPER_V);
        register(code++, UPPER_W);
        register(code++, UPPER_X);
        register(code++, UPPER_Y);
        register(code++, UPPER_Z);
        register(code++, LEFT_ARROW);
        register(code++, HALF);
        register(code++, RIGHT_ARROW);
        register(code++, UP_ARROW);
        register(code++, HASH);
        register(code++, UNDERSCORE);
        register(code++, LOWER_A);
        register(code++, LOWER_B);
        register(code++, LOWER_C);
        register(code++, LOWER_D);
        register(code++, LOWER_E);
        register(code++, LOWER_F);
        register(code++, LOWER_G);
        register(code++, LOWER_H);
        register(code++, LOWER_I);
        register(code++, LOWER_J);
        register(code++, LOWER_K);
        register(code++, LOWER_L);
        register(code++, LOWER_M);
        register(code++, LOWER_N);
        register(code++, LOWER_O);
        register(code++, LOWER_P);
        register(code++, LOWER_Q);
        register(code++, LOWER_R);
        register(code++, LOWER_S);
        register(code++, LOWER_T);
        register(code++, LOWER_U);
        register(code++, LOWER_V);
        register(code++, LOWER_W);
        register(code++, LOWER_X);
        register(code++, LOWER_Y);
        register(code++, LOWER_Z);
        register(code++, QUARTER);
        register(code++, PIPE);
        register(code++, THREE_QUARTERS);
        register(code++, DIVIDE);
        register(code++, BLOCK);
    }

    TextCellProcessorSet() {
        super(MAP);
    }

    private static void register(final int code, final PathSpec characterSpec) {
        MAP.put(code, new TextCellProcessor(characterSpec));
    }
}
